(function ($) {
    var isTrue = true,
        isFalse = false;

    $.fn.imagezoomsl = function (options) {
        options = options || {};
        return this.each(function () {
            if (!$(this).is("img")) return isTrue;
            var img = this;
            setTimeout(function () {
                $(new Image).on('load', function () {
                    ZoomFunctions.initialize($(img), options);
                }).attr("src", $(img).attr("src"));
            }, 30);
        });
    };

    var ZoomFunctions = {};

    $.extend(ZoomFunctions, {
        defaultSettings: {
            loadinggif: "",
            loadopacity: 0.1,
            loadbackground: "#878787",
            cursorshade: isTrue,
            magnifycursor: "crosshair",
            cursorshadecolor: "#fff",
            cursorshadeopacity: 0.3,
            cursorshadeborder: "1px solid black",
            zindex: "",
            stepzoom: 0.5,
            zoomrange: [2, 2],
            zoomstart: 2,
            disablewheel: isTrue,
            showstatus: isTrue,
            showstatustime: 2000,
            statusdivborder: "1px solid black",
            statusdivbackground: "#C0C0C0",
            statusdivpadding: "4px",
            statusdivfont: "bold 13px Arial",
            statusdivopacity: 0.8,
            magnifierpos: "right",
            magnifiersize: [0, 0],
            magnifiereffectanimate: "showIn",
            innerzoom: isFalse,
            innerzoommagnifier: isFalse,
            descarea: isFalse,
            leftoffset: 15,
            rightoffset: 15,
            switchsides: isTrue,
            magnifierborder: "1px solid black",
            textdnbackground: "#fff",
            textdnpadding: "10px",
            textdnfont: "13px/20px cursive",
            scrollspeedanimate: 5,
            zoomspeedanimate: 7,
            loopspeedanimate: 2.5,
            magnifierspeedanimate: 350,
            classmagnifier: "magnifier",
            classcursorshade: "cursorshade",
            classstatusdiv: "statusdiv",
            classtextdn: "textdn"
        },

        isIE: navigator.userAgent.indexOf("MSIE") !== -1 ? isTrue : isFalse,

        getMaxZIndex: function ($element) {
            var zIndex = 0;
            $element.parents().add($element).each(function () {
                var currentZIndex = $(this).css("zIndex");
                currentZIndex = isNaN(currentZIndex) ? 0 : +currentZIndex;
                zIndex = Math.max(zIndex, currentZIndex);
            });
            return zIndex;
        },

        calculatePosition: function (direction, offset, specs) {
            if (direction === "left") {
                var leftPosition = -specs.frame.width * specs.zoomLevel + specs.image.width;
                return Math.max(0, Math.min(offset, leftPosition));
            } else {
                var topPosition = -specs.frame.height * specs.zoomLevel + specs.image.height;
                return Math.max(0, Math.min(offset, topPosition));
            }
        },

        animateZoom: function ($element) {
            var self = this;
            var specs = $element.data("specs");
            if (specs) {
                var elementOffset = specs.element.offset();
                var mouseX = self.mouseX - elementOffset.left;
                var mouseY = self.mouseY - elementOffset.top;
                self.animateProps.mouseX += (self.mouseX - self.animateProps.mouseX) / 2.45342;
                self.animateProps.mouseY += (self.mouseY - self.animateProps.mouseY) / 2.45342;
                specs.statusDiv.css({ left: self.animateProps.mouseX - 10, top: self.animateProps.mouseY + 20 });
                var magnifiedWidth = Math.round(specs.image.width / specs.zoomLevel);
                var magnifiedHeight = Math.round(specs.image.height / specs.zoomLevel);
                self.animateProps.magnifiedX += (mouseX - self.animateProps.magnifiedX) / specs.settings.loopspeedanimate;
                self.animateProps.magnifiedY += (mouseY - self.animateProps.magnifiedY) / specs.settings.loopspeedanimate;
                specs.magnifier.css({
                    left: specs.frame.width > magnifiedWidth ? Math.min(specs.frame.width - magnifiedWidth, Math.max(0, self.animateProps.magnifiedX - magnifiedWidth / 2)) + elementOffset.left - specs.magnifierBorder.left : elementOffset.left - specs.magnifierBorder.left,
                    top: specs.frame.height > magnifiedHeight ? Math.min(specs.frame.height - magnifiedHeight, Math.max(0, self.animateProps.magnifiedY - magnifiedHeight / 2)) + elementOffset.top - specs.magnifierBorder.top : elementOffset.top - specs.magnifierBorder.top
                });
                if (specs.settings.innerzoommagnifier) {
                    self.animateProps.innerMouseX += (self.mouseX - self.animateProps.innerMouseX) / specs.settings.loopspeedanimate;
                    self.animateProps.innerMouseY += (self.mouseY - self.animateProps.innerMouseY) / specs.settings.loopspeedanimate;
                    specs.innerZoomDiv.css({ left: self.animateProps.innerMouseX - Math.round(specs.image.width / 2), top: self.animateProps.innerMouseY - Math.round(specs.image.height / 2) });
                    specs.statusInnerDiv.css({ left: self.animateProps.innerMouseX - Math.round(specs.image.width / 2), top: self.animateProps.innerMouseY + specs.image.height / 2 });
                }
                self.animateProps.scrollX += (mouseX - self.animateProps.scrollX) / specs.settings.scrollspeedanimate;
                self.animateProps.scrollY += (mouseY - self.animateProps.scrollY) / specs.settings.scrollspeedanimate;
                specs.magnifierZoom.css({
                    left: self.calculatePosition("left", -self.animateProps.scrollX * specs.zoomLevel + specs.image.width / 2, specs),
                    top: self.calculatePosition("top", -self.animateProps.scrollY * specs.zoomLevel + specs.image.height / 2, specs)
                });
                self.animateProps.animationTimeout = setTimeout(function () {
                    self.animateZoom($element);
                }, 30);
            }
        },

        animateMagnification: function ($element) {
            var self = this;
            var specs = $element.data("specs");
            if (specs) {
                specs.zoomLevel += (specs.zoomStart - specs.zoomLevel) / specs.settings.zoomspeedanimate;
                specs.zoomLevel = Math.round(specs.zoomLevel * 1000) / 1000;
                specs.magnifier.css({
                    width: specs.frame.width > Math.round(specs.image.width / specs.zoomLevel) ? Math.round(specs.image.width / specs.zoomLevel) : specs.frame.width,
                    height: specs.frame.height > Math.round(specs.image.height / specs.zoomLevel) ? Math.round(specs.image.height / specs.zoomLevel) : specs.frame.height
                });
                specs.magnifierZoom.css({
                    width: Math.round(specs.zoomLevel * specs.original.width * (specs.frame.width / specs.original.width)),
                    height: Math.round(specs.zoomLevel * specs.original.height * (specs.frame.height / specs.original.height))
                });
                self.animateProps.magnificationTimeout = setTimeout(function () {
                    self.animateMagnification($element);
                }, 30);
            }
        },

        animateProps: {},

        displayMagnifier: function ($element) {
            var self = this;
            var specs = $element.data("specs");
            var magnifierLeft = specs.element.offset().left + (specs.settings.magnifierpos === "left" ? -specs.image.width - specs.settings.leftoffset : specs.frame.width + specs.settings.rightoffset);
            if (specs.settings.switchsides && !specs.settings.innerzoom && ((specs.settings.magnifierpos !== "left" && magnifierLeft + specs.image.width + specs.settings.leftoffset >= $(window).width() && specs.element.offset().left - specs.image.width >= specs.settings.leftoffset) || (specs.settings.magnifierpos === "left" && magnifierLeft < 0))) {
                magnifierLeft = specs.element.offset().left + specs.frame.width + specs.settings.rightoffset;
            }
            var magnifierTop = specs.element.offset().top;
            specs.innerZoomDiv.css({ visibility: "visible", display: "none" });
            if (specs.settings.descarea) {
                magnifierLeft = $(specs.settings.descarea).offset().left;
                magnifierTop = $(specs.settings.descarea).offset().top;
            }
            if (specs.settings.innerzoommagnifier) {
                magnifierLeft = self.mouseX - Math.round(specs.image.width / 2);
                magnifierTop = self.mouseY - Math.round(specs.image.height / 2);
            }
            var displayMagnifier = function () {
                specs.statusDiv.stop(isTrue, isTrue).fadeIn(specs.settings.magnifierspeedanimate);
                if (!specs.settings.innerzoommagnifier) {
                    specs.statusDiv.css({ left: magnifierLeft, top: magnifierTop + specs.settings.magnifiersize[1] });
                    specs.statusInnerDiv.css({ left: magnifierLeft, top: magnifierTop + specs.image.height + 20 });
                    specs.innerZoomDiv.css({ left: magnifierLeft, top: magnifierTop });
                } else {
                    specs.statusDiv.css({ left: self.mouseX - 10, top: self.mouseY + 20 });
                    specs.innerZoomDiv.css({ left: self.mouseX - Math.round(specs.image.width / 2), top: self.mouseY - Math.round(specs.image.height / 2) });
                    specs.statusInnerDiv.css({ left: self.mouseX - Math.round(specs.image.width / 2), top: self.mouseY + specs.image.height / 2 });
                }
                specs.innerZoomDiv[specs.settings.magnifiereffectanimate](specs.settings.magnifierspeedanimate);
                self.animateZoom($element);
            };
            if (specs.settings.loadinggif) {
                specs.innerZoomDiv.css({ background: "url(" + specs.settings.loadinggif + ") no-repeat center", opacity: 0.5 }).fadeIn(specs.settings.magnifierspeedanimate, displayMagnifier);
            } else {
                displayMagnifier();
            }
        },

        hideMagnifier: function ($element) {
            var self = this;
            var specs = $element.data("specs");
            specs.statusDiv.stop(isTrue, isTrue).fadeOut(specs.settings.magnifierspeedanimate);
            specs.innerZoomDiv.stop(isTrue, isTrue)[specs.settings.magnifiereffectanimate === "fadeIn" ? "fadeOut" : specs.settings.magnifiereffectanimate === "showIn" ? "hide" : "slideUp"](specs.settings.magnifierspeedanimate, function () {
                specs.innerZoomDiv.css({ background: "", opacity: 1 });
                if (specs.settings.innerzoommagnifier) {
                    specs.innerZoomDiv.css({ visibility: "hidden" });
                }
            });
            clearTimeout(self.animateProps.animationTimeout);
            clearTimeout(self.animateProps.magnificationTimeout);
        },

        showStatus: function (msg, $element) {
            var self = this;
            var specs = $element.data("specs");
            specs.statusDiv.html(msg);
            clearTimeout(self.animateProps.statusTimeout);
            specs.statusDiv.stop(isTrue, isTrue).fadeIn(specs.settings.magnifierspeedanimate).fadeOut(specs.settings.magnifierspeedanimate, function () {
                self.animateProps.statusTimeout = setTimeout(function () {
                    specs.statusDiv.hide();
                }, specs.settings.showstatustime);
            });
        },

        initialize: function ($element, options) {
            var self = this;
            var settings = $.extend({}, self.defaultSettings, options);
            var specs = {};
            specs.settings = settings;
            specs.element = $element;
            var $img = $element.is("img") ? $element : $element.find("img").eq(0);
            specs.image = { width: $img.width(), height: $img.height() };
            specs.frame = { width: $element.width(), height: $element.height() };
            specs.original = { width: $img[0].naturalWidth, height: $img[0].naturalHeight };
            specs.zoomLevel = settings.zoomstart;
            specs.magnifierBorder = { left: parseFloat(settings.magnifierborder.split(" ")[0]) || 0, top: parseFloat(settings.magnifierborder.split(" ")[0]) || 0 };
            specs.innerZoomDiv = $("<div>").addClass(settings.classmagnifier).appendTo("body");
            specs.magnifier = $("<div>").addClass(settings.classmagnifier).css({
                position: "absolute",
                overflow: "hidden",
                zIndex: self.getMaxZIndex($element) + 2
            }).appendTo(specs.innerZoomDiv);
            specs.magnifierZoom = $("<img>").attr("src", $img.attr("src")).css({
                position: "absolute"
            }).appendTo(specs.magnifier);
            specs.cursorshade = $("<div>").addClass(settings.classcursorshade).css({
                position: "absolute",
                zIndex: self.getMaxZIndex($element) + 1,
                border: settings.cursorshadeborder,
                background: settings.cursorshadecolor,
                opacity: settings.cursorshadeopacity
            }).appendTo("body");
            specs.statusDiv = $("<div>").addClass(settings.classstatusdiv).css({
                position: "absolute",
                zIndex: self.getMaxZIndex($element) + 3,
                border: settings.statusdivborder,
                background: settings.statusdivbackground,
                padding: settings.statusdivpadding,
                font: settings.statusdivfont,
                opacity: settings.statusdivopacity,
                display: "none"
            }).appendTo("body");
            specs.statusInnerDiv = $("<div>").addClass(settings.classtextdn).css({
                position: "absolute",
                zIndex: self.getMaxZIndex($element) + 4,
                border: settings.statusdivborder,
                background: settings.textdnbackground,
                padding: settings.textdnpadding,
                font: settings.textdnfont,
                opacity: settings.statusdivopacity,
                display: "none"
            }).appendTo("body");
            $element.data("specs", specs);

            $element.on("mouseenter", function (e) {
                self.mouseX = e.pageX;
                self.mouseY = e.pageY;
                self.displayMagnifier($element);
                specs.cursorshade.css({ display: settings.cursorshade ? "block" : "none" });
                self.animateProps.magnificationTimeout = setTimeout(function () {
                    self.animateMagnification($element);
                }, 30);
            });

            $element.on("mousemove", function (e) {
                self.mouseX = e.pageX;
                self.mouseY = e.pageY;
                if (!settings.cursorshade) return;
                var frameOffset = specs.element.offset();
                var cursorShadeLeft = e.pageX - frameOffset.left - specs.cursorshade.width() / 2;
                var cursorShadeTop = e.pageY - frameOffset.top - specs.cursorshade.height() / 2;
                cursorShadeLeft = Math.max(0, Math.min(specs.frame.width - specs.cursorshade.width(), cursorShadeLeft));
                cursorShadeTop = Math.max(0, Math.min(specs.frame.height - specs.cursorshade.height(), cursorShadeTop));
                specs.cursorshade.css({ left: cursorShadeLeft, top: cursorShadeTop });
            });

            $element.on("mouseleave", function () {
                self.hideMagnifier($element);
                specs.cursorshade.hide();
            });

            if (!settings.disablewheel) {
                $element.on("wheel", function (e) {
                    var delta = e.originalEvent.deltaY > 0 ? -settings.stepzoom : settings.stepzoom;
                    var newZoomLevel = Math.min(Math.max(specs.zoomLevel + delta, settings.zoomrange[0]), settings.zoomrange[1]);
                    if (newZoomLevel !== specs.zoomLevel) {
                        specs.zoomLevel = newZoomLevel;
                        self.showStatus("Zoom: " + Math.round(newZoomLevel * 100) + "%", $element);
                        specs.zoomStart = specs.zoomLevel;
                    }
                    e.preventDefault();
                });
            }

            if (settings.showstatus) {
                specs.statusDiv.on("mouseenter", function () {
                    specs.statusDiv.stop(isTrue, isTrue).fadeIn(settings.magnifierspeedanimate);
                }).on("mouseleave", function () {
                    self.animateProps.statusTimeout = setTimeout(function () {
                        specs.statusDiv.hide();
                    }, settings.showstatustime);
                });
            }

            specs.magnifier.on("mouseenter", function () {
                clearTimeout(self.animateProps.magnificationTimeout);
            }).on("mouseleave", function () {
                self.animateProps.magnificationTimeout = setTimeout(function () {
                    self.animateMagnification($element);
                }, 30);
            });

            if (settings.innerzoom && !settings.innerzoommagnifier) {
                specs.statusDiv.on("mouseenter", function () {
                    clearTimeout(self.animateProps.animationTimeout);
                }).on("mouseleave", function () {
                    self.animateZoom($element);
                });
            }
        }
    });

    $(window).on("load", function () {
        $("img.imagezoomsl").each(function () {
            $(this).imagezoomsl();
        });
    });
})(jQuery);
